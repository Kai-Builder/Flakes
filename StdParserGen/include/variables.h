//
// Created by seymo on 3/3/2021.
//
#include <fstream>
#include <vector>
#include <iostream>

#ifndef FLAKES_VARIABLES_H
#define FLAKES_VARIABLES_H
namespace std {
    namespace names {
        enum name {
            TYPE_NAME,
            TYPE_VALUE
        };
    }
    namespace filetypes {
        enum filetype {
            YAML,
            HTML,
            TD,
            C,
            NONE
        };
    }
    namespace parsers {
        struct basic_parser {
            char variable_delim;
            const char* file;

            // Create a YML File while EOF != true
            // Mainly used as a debug feature to test if the parser is working correctly.
            void start_log(std::filetypes::filetype type) const {
                if (type == filetypes::YAML) {
                    std::ifstream parseable(file);
                    if (!parseable)
                        return;

                    std::string val;
                    std::string key;
                    while (getline(parseable, key, variable_delim) && getline(parseable, val, '\n')) {
                        std::ofstream out("out.yml", std::ios::app);
                        out << "variable:\n\tname: " << key << "\n\tvalue: " << val << std::endl;
                        out.close();
                    }
                }
                else if (type == filetypes::NONE) {
                    // Do nothing. . .
                }
                else if (type == filetypes::HTML) {
                    std::ifstream parseable(file);
                    if (!parseable)
                        return;

                    std::string val;
                    std::string key;
                    std::ofstream out("out.html", std::ios::app);
                    out << "<h1>This file was generated by flakes, A Giant C++ STL Extension that enhances coding.</h1>\n\n<div about=\"this.encoding().toString().validJSON.Data.Returned(1)\">\n" << std::endl;
                    out.close();
                    while (getline(parseable, key, variable_delim) && getline(parseable, val, '\n')) {
                        std::ofstream outf("out.html", std::ios::app);
                        outf << "<pre>this:\n\tname: " << key << "\n\t\tval: " << val << std::endl;
                        outf.close();
                    }
                    std::ofstream outf("out.html", std::ios::app);
                    outf << "\n</div>" << std::endl;
                    outf.close();
                }
            }
            // Used to test if variables are able to be returned. Returns a string with all valid variables using namespace variable_delim and getline()
            void return_vars(std::names::name e) const {
                std::ifstream parseable(file);
                if (!parseable)
                    std::cout << "Failed at return_vars()" << std::endl;;
                std::vector <std::string> vars{};
                std::string val;
                std::string key;
                while (getline(parseable, key, variable_delim) && getline(parseable, val, '\n')) {
                    if (e == names::TYPE_NAME)
                        vars.push_back(key);
                    else if (e == names::TYPE_VALUE)
                        vars.push_back(val);
                }
                for (auto & var : vars) {
                    if (var[var.size()] != '\n')
                        std::cout << var << ",";
                }
            }
        };

    }
}
#endif //FLAKES_VARIABLES_H
